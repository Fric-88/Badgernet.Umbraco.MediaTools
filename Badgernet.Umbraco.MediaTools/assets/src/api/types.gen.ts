// This file is auto-generated by @hey-api/openapi-ts

export type ConvertMode = 'lossy' | 'lossless';

export type EventMessageTypeModel = 'Default' | 'Info' | 'Error' | 'Success' | 'Warning';

export type FilterImagesDto = {
    folderName?: string | null;
    width: number;
    height: number;
    nameLike: string;
    extensionLike: string;
    sizeFilter: SizeFilter;
};

export type GalleryInfoDto = {
    mediaCount: number;
    folderCount: number;
    countByExtension: Array<(KeyValuePair_2)>;
};

export type ImageMediaDto = {
    id: number;
    name: string;
    width: number;
    height: number;
    extension: string;
    path: string;
    size: string;
};

export type ImageProcessingResponse = {
    status: ResponseStatus;
    message: string;
    payload?: unknown;
};

export type KeyValuePair_2 = {
    key?: string | null;
    value: number;
};

export type NotificationHeaderModel = {
    message: string;
    category: string;
    type: EventMessageTypeModel;
};

export type ProcessImagesDto = {
    ids: Array<(number)>;
    resize: boolean;
    convert: boolean;
    resizeMode: ResizeMode;
    width: number;
    height: number;
    convertMode: ConvertMode;
    convertQuality: number;
};

export type RecycleMediaResponse = {
    status: ResponseStatus;
    message: string;
    payload?: unknown;
};

export type ResizeMode = 'FitInside' | 'ExactSize';

export type ResponseStatus = 'Success' | 'Error' | 'Skipped' | 'Warning';

export type SizeFilter = 'AllSizes' | 'BiggerThan' | 'SmallerThan';

export type UserSettingsDto = {
    resizerEnabled: boolean;
    converterEnabled: boolean;
    convertMode: ConvertMode;
    convertQuality: number;
    ignoreAspectRatio: boolean;
    targetWidth: number;
    targetHeight: number;
    keepOriginals: boolean;
    ignoreKeyword: string;
};

export type DownloadMediaData = {
    requestBody?: Array<(number)>;
};

export type DownloadMediaResponse = (Blob | File);

export type FilterGalleryData = {
    requestBody?: FilterImagesDto;
};

export type FilterGalleryResponse = Array<(ImageMediaDto)>;

export type GetGalleryInfoResponse = GalleryInfoDto;

export type ListFoldersResponse = Array<(string)>;

export type ProcessImagesData = {
    requestBody?: ProcessImagesDto;
};

export type ProcessImagesResponse = ImageProcessingResponse;

export type RecycleMediaData = {
    requestBody?: Array<(number)>;
};

export type RecycleMediaResponse2 = RecycleMediaResponse;

export type GetSettingsData = {
    userKey?: string;
};

export type GetSettingsResponse = UserSettingsDto;

export type SetSettingsData = {
    requestBody?: UserSettingsDto;
    userKey?: string;
};

export type SetSettingsResponse = string;

export type $OpenApiTs = {
    '/gallery/download': {
        post: {
            req: DownloadMediaData;
            res: {
                /**
                 * OK
                 */
                200: (Blob | File);
            };
        };
    };
    '/gallery/filter': {
        post: {
            req: FilterGalleryData;
            res: {
                /**
                 * OK
                 */
                200: Array<(ImageMediaDto)>;
            };
        };
    };
    '/gallery/get-info': {
        get: {
            res: {
                /**
                 * OK
                 */
                200: GalleryInfoDto;
            };
        };
    };
    '/gallery/list-folders': {
        get: {
            res: {
                /**
                 * OK
                 */
                200: Array<(string)>;
            };
        };
    };
    '/gallery/process': {
        post: {
            req: ProcessImagesData;
            res: {
                /**
                 * OK
                 */
                200: ImageProcessingResponse;
                /**
                 * Bad Request
                 */
                400: ImageProcessingResponse;
            };
        };
    };
    '/gallery/trash': {
        post: {
            req: RecycleMediaData;
            res: {
                /**
                 * OK
                 */
                200: RecycleMediaResponse;
            };
        };
    };
    '/settings/get': {
        get: {
            req: GetSettingsData;
            res: {
                /**
                 * OK
                 */
                200: UserSettingsDto;
            };
        };
    };
    '/settings/set': {
        post: {
            req: SetSettingsData;
            res: {
                /**
                 * OK
                 */
                200: string;
            };
        };
    };
};